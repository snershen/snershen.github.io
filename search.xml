<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MongoDB Shell</title>
      <link href="/2024/03/17/mongoDB%20_Shell/"/>
      <url>/2024/03/17/mongoDB%20_Shell/</url>
      
        <content type="html"><![CDATA[<p>MongoDB 是一種非關聯式資料（NoSQL），談到資料庫，就會想到 CRUD 這個詞彙，指的是對資料進行的基本操作，分別是指新增(Create)、查詢(Read)、更新(Update)、移除(Delete)。</p><p>有時我們只想對資料庫做些簡單操作，不需要使用後端語言，這時就可以透過 Mongo Shell，直接在終端機裡使用指令，對資料庫進行操作。</p><h2 id="MongoDB-資料庫組成"><a href="#MongoDB-資料庫組成" class="headerlink" title="MongoDB 資料庫組成"></a>MongoDB 資料庫組成</h2><p>可分為三個層級，這裡搭配 Excel 的概念來幫助理解：</p><ul><li>Database：資料庫，類似建立或打開了一個 Excel 檔案</li><li>Collections：Excel 檔案裡的工作表</li><li>Document：工作表裡的某一筆資料</li></ul><p>首先會從 Database 層級，開始介紹指令。</p><h2 id="資料庫"><a href="#資料庫" class="headerlink" title="資料庫"></a>資料庫</h2><ul><li>查看目前有哪些資料庫：<code>show dbs</code></li><li>新增&#x2F;切換資料庫：<code>use &lt;database name&gt;</code>，若存在就切換到該資料庫，不存在就新增</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use bookstore</span><br><span class="line"><span class="comment">// 建立一個名為 bookstore 的資料庫</span></span><br></pre></td></tr></table></figure><p>需要留意的是，這時使用 <code>show dbs</code> 指令，還不會看到 bookstore 資料庫，因為此資料庫裡還沒有加入任何 Collections。可以想像成 Excel 新建立的檔案，預設就會開一個工作表供編輯，只是資料庫需要我們手動做這件事。</p><p>通常會指定要在某個工作表裡尋找某筆資料，所以接下來會一起介紹 Collections 和 Document 這兩個層級的指令。</p><h2 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h2><h3 id="新增單筆資料"><a href="#新增單筆資料" class="headerlink" title="新增單筆資料"></a>新增單筆資料</h3><ul><li><code>insertOne(&lt;data&gt;, &lt;options&gt;)</code>：新增單筆資料，data 須為「物件」形式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">insertOne</span>(&#123; <span class="attr">price</span>: <span class="number">300</span>, <span class="attr">category</span>: <span class="string">&quot;社會科學&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;被討厭的勇氣&quot;</span> &#125;);</span><br><span class="line"><span class="comment">// 目前 db 是指 bookstore 資料庫</span></span><br><span class="line"><span class="comment">// 因為尚未建立任何 Collections，所以此處是建立 Collections，並命名為 books</span></span><br><span class="line"><span class="comment">// 透過 insertOne 指令新增單筆資料</span></span><br></pre></td></tr></table></figure><h3 id="新增多筆資料"><a href="#新增多筆資料" class="headerlink" title="新增多筆資料"></a>新增多筆資料</h3><ul><li><code>insertMany(&lt;data&gt;, &lt;options&gt;)</code>：新增多筆資料，data 須為「陣列」形式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">insertOne</span>([</span><br><span class="line">  &#123; <span class="attr">rating</span>: <span class="number">4.5</span>, <span class="attr">price</span>: <span class="number">1000</span>, <span class="attr">name</span>: <span class="string">&quot;金錢心理學&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">rating</span>: <span class="number">4.5</span>, <span class="attr">price</span>: <span class="number">1000</span>, <span class="attr">name</span>: <span class="string">&quot;底層邏輯&quot;</span> &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h2 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h2><p>查詢通常會搭配很多語法，這邊先介紹最簡單的，列出 bookstore 資料庫中，books 工作表裡的所有資料。</p><ul><li>查詢資料：<code>find(&lt;filter&gt;, &lt;options&gt;)</code></li></ul><p>若 find 參數為空值，就會列出所有資料，裡面也可以指定篩選條件，後續會再做進一步的介紹。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">find</span>();</span><br></pre></td></tr></table></figure><p>可能會覺得終端機裡呈現的格式很醜，這時候可以加入 <code>pretty()</code> 格式化資料內容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">find</span>().<span class="title function_">pretty</span>();</span><br></pre></td></tr></table></figure><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><p>Mongo Shell 指令裡更新資料的語法，有區分為更新該筆資料的「所有內容」和「部分內容」。</p><p>這部分有點像網路請求方法裡的 put 和 patch，兩者都可以更新資料，但前者會將該筆資料整個替換掉，後者則只更新特定欄位。</p><h3 id="部分更新單筆資料"><a href="#部分更新單筆資料" class="headerlink" title="部分更新單筆資料"></a>部分更新單筆資料</h3><ul><li><code>updateOne(&lt;filter&gt;, &lt;update&gt;, &lt;options&gt;)</code>：只會更新第一筆符合條件的資料，並更新特定欄位，通常會搭配 id 做篩選</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">updateOne</span>(</span><br><span class="line">  &#123; <span class="attr">_id</span>: <span class="title class_">ObjectId</span>(<span class="string">&quot;5323442434234&quot;</span>) &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">$set</span>: &#123;</span><br><span class="line">      <span class="attr">rating</span>: <span class="number">3.0</span>,</span><br><span class="line">      <span class="attr">price</span>: <span class="number">1200</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;哈利波特精裝版&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="部分更新多筆資料"><a href="#部分更新多筆資料" class="headerlink" title="部分更新多筆資料"></a>部分更新多筆資料</h3><ul><li><code>updateMany(&lt;filter&gt;, &lt;update&gt;, &lt;options&gt;)</code>：更新多筆符合條件的資料，只會更新特定欄位</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">updateMany</span>(</span><br><span class="line">  &#123; <span class="attr">price</span>: <span class="number">400</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">$set</span>: &#123;</span><br><span class="line">      <span class="attr">discount</span>: <span class="number">0.8</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>以上都是部份更新資料的語法，都會搭配 $set 運算子</p></blockquote><h3 id="替換掉整筆資料"><a href="#替換掉整筆資料" class="headerlink" title="替換掉整筆資料"></a>替換掉整筆資料</h3><ul><li><code>replaceOne(&lt;filter&gt;, &lt;update&gt;, &lt;options&gt;))</code>：替換掉「第一筆」符合篩選條件的資料，會更新整筆資料的內容<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">replaceOne</span>(</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;被討厭的勇氣&quot;</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;被討厭的勇氣 增訂版&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><h3 id="刪除單筆資料"><a href="#刪除單筆資料" class="headerlink" title="刪除單筆資料"></a>刪除單筆資料</h3><ul><li><code>deleteOne(&lt;filter&gt;, &lt;options&gt;)</code>：刪除單筆資料，通常會搭配 id 做篩選</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">deleteOne</span>(&#123; <span class="attr">_id</span>: <span class="title class_">ObjectId</span>(<span class="string">&quot;5323442434234&quot;</span>) &#125;);</span><br></pre></td></tr></table></figure><h3 id="刪除多筆資料"><a href="#刪除多筆資料" class="headerlink" title="刪除多筆資料"></a>刪除多筆資料</h3><ul><li><code>deleteMany(&lt;filter&gt;, &lt;options&gt;)</code>：刪除多筆資料</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">deleteMany</span>(&#123; <span class="attr">rating</span>: <span class="number">4.8</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="刪除所有資料"><a href="#刪除所有資料" class="headerlink" title="刪除所有資料"></a>刪除所有資料</h3><ul><li><code>drop()</code></li><li><code>remove()</code></li></ul><p>刪除所有資料，但不會刪除索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">drop</span>();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">remove</span>();</span><br></pre></td></tr></table></figure><h2 id="進階查詢"><a href="#進階查詢" class="headerlink" title="進階查詢"></a>進階查詢</h2><h3 id="單筆"><a href="#單筆" class="headerlink" title="單筆"></a>單筆</h3><ul><li><code>findOne()</code>：查詢單筆資料，通常會搭配 id，只會找到第一個符合條件的資料</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">_id</span>: <span class="title class_">ObjectId</span>(<span class="string">&quot;5323442434234&quot;</span>) &#125;);</span><br></pre></td></tr></table></figure><h3 id="多筆"><a href="#多筆" class="headerlink" title="多筆"></a>多筆</h3><ul><li>使用屬性查找</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回傳符合 price 欄位是 2500 的 document</span></span><br><span class="line">db.<span class="property">books</span>.<span class="title function_">find</span>(&#123; <span class="attr">price</span>: <span class="number">2500</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>寫入多個篩選條件，類似邏輯運算子裡的 and</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">deleteMany</span>(&#123; <span class="attr">price</span>: <span class="number">2500</span>, <span class="attr">rating</span>: <span class="number">4.0</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>區間：可放入比較運算子，但是 MongoDB 在這部分不是使用 &gt;, &lt; 等符號，需要另外記得運算子的寫法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查詢價格為 1500 以下，評分為 4.7 以上</span></span><br><span class="line">db.<span class="property">books</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">price</span>: &#123;</span><br><span class="line">    <span class="attr">$lte</span>: <span class="number">1500</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rating</span>: &#123;</span><br><span class="line">    <span class="attr">$gte</span>: <span class="number">4.7</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><table><thead><tr><th>功能</th><th>運算子</th></tr></thead><tbody><tr><td>等於</td><td>$eq</td></tr><tr><td>不等於</td><td>$ne</td></tr><tr><td>大於</td><td>$gt</td></tr><tr><td>小於</td><td>$lt</td></tr><tr><td>大於等於</td><td>$gte</td></tr><tr><td>小於等於</td><td>$lte</td></tr><tr><td>存在某個值</td><td>$in</td></tr><tr><td>不存在某個值</td><td>$nin</td></tr></tbody></table><ul><li>關鍵字搜尋：只需要部分字串相同，寫成<code>/內容/</code>形式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="regexp">/豪華/</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>保護欄位：一些欄位的隱私性較高，不希望查詢時被看見，就能夠寫入 options 參數，0 是不要顯示此欄位，1 則是可以顯示</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">find</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="regexp">/豪華/</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">_id</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">rating</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>篩選陣列：有時欄位裡是放入陣列資料，需要透過 $in 篩選。需要注意的是，只要其中一個條件符合，就會撈取該資料，類似 <code>$or</code> 邏輯運算子</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">payment</span>: &#123;</span><br><span class="line">    <span class="attr">$in</span>: [<span class="string">&quot;信用卡&quot;</span>, <span class="string">&quot;ATM&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="邏輯運算子"><a href="#邏輯運算子" class="headerlink" title="邏輯運算子"></a>邏輯運算子</h3><p>通常有多重條件，會使用陣列形式</p><ul><li><code>$and</code>：符合所有條件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">$and</span>: [&#123; <span class="attr">likes</span>: &#123; <span class="attr">$gte</span>: <span class="number">1500</span> &#125; &#125;, &#123; <span class="attr">comments</span>: &#123; <span class="attr">$gte</span>: <span class="number">1500</span> &#125; &#125;],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>$or：符合其中一個欄位</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">find</span>(&#123;</span><br><span class="line">  <span class="attr">$or</span>: [&#123; <span class="attr">likes</span>: &#123; <span class="attr">$gte</span>: <span class="number">1000</span> &#125; &#125;, &#123; <span class="attr">comments</span>: &#123; <span class="attr">$gte</span>: <span class="number">1000</span> &#125; &#125;],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="操作陣列"><a href="#操作陣列" class="headerlink" title="操作陣列"></a>操作陣列</h2><ul><li><code>$push</code>：陣列新增資料</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">updateOne</span>(</span><br><span class="line">  &#123; <span class="attr">_id</span>: <span class="title class_">ObjectId</span>(<span class="string">&quot;65f6f3504039b40bcfe20369&quot;</span>) &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">$push</span>: &#123;</span><br><span class="line">      <span class="attr">tags</span>: <span class="string">&quot;遊記&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><code>$addToSet</code>：陣列新增資料，若陣列已經有該資料就不會新增</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">updateOne</span>(</span><br><span class="line">  &#123; <span class="attr">_id</span>: <span class="title class_">ObjectId</span>(<span class="string">&quot;65f6f3504039b40bcfe20369&quot;</span>) &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">$addToSet</span>: &#123;</span><br><span class="line">      <span class="attr">tags</span>: <span class="string">&quot;遊記&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><code>$pull</code>：移除陣列中特定資料</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">updateMany</span>(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">$pull</span>: &#123;</span><br><span class="line">      <span class="attr">tags</span>: <span class="string">&quot;感情&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h2><ul><li>計算 document 數量：<code>find().count()</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">find</span>().<span class="title function_">count</span>();</span><br></pre></td></tr></table></figure><ul><li>查詢＋排序</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 時間由近到遠</span></span><br><span class="line">db.<span class="property">books</span>.<span class="title function_">find</span>(&#123; <span class="attr">category</span>: <span class="string">&quot;社會科學&quot;</span> &#125;).<span class="title function_">sort</span>(&#123; <span class="attr">createdAt</span>: -<span class="number">1</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 時間由遠到近</span></span><br><span class="line">db.<span class="property">books</span>.<span class="title function_">find</span>(&#123; <span class="attr">category</span>: <span class="string">&quot;社會科學&quot;</span> &#125;).<span class="title function_">sort</span>(&#123; <span class="attr">createdAt</span>: <span class="number">1</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>限定取回的資料筆數：<code>limit()</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span>.<span class="title function_">find</span>(&#123; <span class="attr">category</span>: <span class="string">&quot;社會科學&quot;</span> &#125;).<span class="title function_">limit</span>(<span class="number">30</span>);</span><br></pre></td></tr></table></figure><ul><li>跳過 x 筆資料：<code>skip()</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.<span class="property">books</span></span><br><span class="line">  .<span class="title function_">find</span>(&#123; <span class="attr">comments</span>: &#123; <span class="attr">$gt</span>: <span class="number">100</span> &#125; &#125;)</span><br><span class="line">  .<span class="title function_">skip</span>(<span class="number">30</span>)</span><br><span class="line">  .<span class="title function_">limit</span>(<span class="number">30</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pinia - Option API 版本</title>
      <link href="/2024/03/13/pinia_option-api/"/>
      <url>/2024/03/13/pinia_option-api/</url>
      
        <content type="html"><![CDATA[<p>Pinia 是 Vue 框架的狀態管理工具，可以跨組件或跨頁面共享狀態，並且支援 Vue2、Vue3，提供了 Options API 和 Composition API，這篇主要會使用 Option API 寫法來做介紹。</p><h1 id="Pinia-解決了什麼問題？"><a href="#Pinia-解決了什麼問題？" class="headerlink" title="Pinia 解決了什麼問題？"></a>Pinia 解決了什麼問題？</h1><p>Pinia 解決了「跨元件傳遞」問題。在 Vue 裡面，每個元件的資料是獨立的，不使用狀態管理工具，根元件傳到子元件會使用<code>props</code>，子元件資料傳到根元件使用<code>emit</code>。</p><p>那麼問題來了，如果要將 A 元件的資料傳到沒有從屬關係的 B 元件呢？</p><p>如果僅使用 props 和 emit，資料傳遞會變得相當複雜，使用 Pinia 就能將狀態和方法抽取出來，存到 Pinia 的 Store 裡面，再個別引入到 A、B 元件中。</p><h1 id="Pinia-使用說明"><a href="#Pinia-使用說明" class="headerlink" title="Pinia 使用說明"></a>Pinia 使用說明</h1><ol><li>引入 Pinia 資源</li><li>在專案中加入 Pinia</li><li>定義 Store</li><li>使用 Store</li></ol><h2 id="一、引入-Pinia-資源"><a href="#一、引入-Pinia-資源" class="headerlink" title="一、引入 Pinia 資源"></a>一、引入 Pinia 資源</h2><p>可以使用 CDN，但比較常用的方式還是 npm</p><h3 id="CDN：需要額外引入-VueDemi"><a href="#CDN：需要額外引入-VueDemi" class="headerlink" title="CDN：需要額外引入 VueDemi"></a>CDN：需要額外引入 VueDemi</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- VueDemi，使用 Pinia 必要的相依套件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/vue-demi/0.13.11/index.iife.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Pinia 網頁版，實戰中還是以 npm 為主，這是比較少見的使用方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/pinia/2.0.22/pinia.iife.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><h2 id="二、在專案中加入-Pinia"><a href="#二、在專案中加入-Pinia" class="headerlink" title="二、在專案中加入 Pinia"></a>二、在專案中加入 Pinia</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提取 Pinia 方法</span></span><br><span class="line"><span class="keyword">const</span> &#123; createPinia &#125; = <span class="title class_">Pinia</span>;</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line">app.<span class="title function_">use</span>(pinia);</span><br></pre></td></tr></table></figure><h2 id="三、定義-Store"><a href="#三、定義-Store" class="headerlink" title="三、定義 Store"></a>三、定義 Store</h2><p>Pinia 是使用 store 存放共用的狀態和方法，就不會像放在全域那麼容易被覆蓋或污染環境</p><ol><li>在專案的 src 資料夾裡，建立一個 store 資料夾，放置 Pinia 相關檔案，檔案命名規則為 <code>xxxStore.js</code></li><li>使用 <code>defineStore</code> 定義 store，<code>defineStore</code> 有兩個參數，第一個必須是唯一值，用來辨識專案中的 Store；第二個參數是物件，放置資料或狀態，裡面主要分成三個屬性，對應到不同用途的內容：</li></ol><ul><li><code>state</code>：類似 Vue 的 data</li><li><code>getters</code>：類似 Vue 的 computed</li><li><code>actions</code>：類似 Vue 的 methods</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/counterStore.js 檔案</span></span><br><span class="line"><span class="keyword">const</span> &#123; defineStore &#125; = <span class="title class_">Pinia</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defineStore 有兩個參數</span></span><br><span class="line"><span class="comment">// 第一個參數必須是唯一id，用來辨識專案中的 Store</span></span><br><span class="line"><span class="comment">// 第二個參數是一個物件，放置資料或狀態</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineStore</span>(<span class="string">&quot;counterStore&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  <span class="comment">/* 也可以這樣寫</span></span><br><span class="line"><span class="comment">  state: () =&gt; &#123;</span></span><br><span class="line"><span class="comment">    return &#123; count: 0 &#125;</span></span><br><span class="line"><span class="comment">  &#125;,</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">double</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">count</span> * <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="四、使用-Store"><a href="#四、使用-Store" class="headerlink" title="四、使用 Store"></a>四、使用 Store</h2><p>在元件檔裡使用 Store，有兩種方式：</p><h3 id="方法-1-使用mapState、mapActions逐一取出資料與方法，比較適合內容較少的-Store"><a href="#方法-1-使用mapState、mapActions逐一取出資料與方法，比較適合內容較少的-Store" class="headerlink" title="方法 1. 使用mapState、mapActions逐一取出資料與方法，比較適合內容較少的 Store"></a>方法 1. 使用<code>mapState</code>、<code>mapActions</code>逐一取出資料與方法，比較適合內容較少的 Store</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// counterView.vue</span></span><br><span class="line"><span class="keyword">const</span> &#123; mapState, mapActions &#125; = <span class="title class_">Pinia</span>;</span><br><span class="line"><span class="keyword">import</span> countStore <span class="keyword">from</span> <span class="string">&quot;../store/countStore.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 獲取在 state 和 getters 屬性裡的內容</span></span><br><span class="line">    ...<span class="title function_">mapState</span>(countStore, [<span class="string">&#x27;state&#x27;</span>, <span class="string">&#x27;double&#x27;</span>]),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 獲取在 actions 屬性裡的內容</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(countStore, [<span class="string">&#x27;increment&#x27;</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="方法-2-如果-Store-內有多個屬性，可以直接使用-mapStores-獲取整個-Store"><a href="#方法-2-如果-Store-內有多個屬性，可以直接使用-mapStores-獲取整個-Store" class="headerlink" title="方法 2. 如果 Store 內有多個屬性，可以直接使用 mapStores 獲取整個 Store"></a>方法 2. 如果 Store 內有多個屬性，可以直接使用 <code>mapStores</code> 獲取整個 Store</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapStores &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapStores</span>(useCartStore, useUserStore)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">buyStuff</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">userStore</span>.<span class="title function_">isAuthenticated</span>()) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">cartStore</span>.<span class="title function_">buy</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/purchased&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常見問題"><a href="#常見問題" class="headerlink" title="常見問題"></a>常見問題</h1><h3 id="Q1-為何元件中使用-mapState-時需要使用展開-…-的方式？"><a href="#Q1-為何元件中使用-mapState-時需要使用展開-…-的方式？" class="headerlink" title="Q1. 為何元件中使用 mapState 時需要使用展開 (…) 的方式？"></a>Q1. 為何元件中使用 mapState 時需要使用展開 (…) 的方式？</h3><p>A: 以 computed 來說，若元件本身有定義內容，如果沒有使用展開語法的話，就會被 Store 的內容覆蓋掉。</p><h3 id="Q2-可以將-API-請求放到-Pinia-統一管理嗎？"><a href="#Q2-可以將-API-請求放到-Pinia-統一管理嗎？" class="headerlink" title="Q2. 可以將 API 請求放到 Pinia 統一管理嗎？"></a>Q2. 可以將 API 請求放到 Pinia 統一管理嗎？</h3><p>A: 可在 Pinia 中定義 actions 做非同步操作，操作成功時將資料帶到 state，接著在元件的 mounted 或 created 做觸發。</p><h3 id="Q3-為什麼箭頭函式的-還要再包一層-在外面？"><a href="#Q3-為什麼箭頭函式的-還要再包一層-在外面？" class="headerlink" title="Q3. 為什麼箭頭函式的 {} 還要再包一層 () 在外面？"></a>Q3. 為什麼箭頭函式的 {} 還要再包一層 () 在外面？</h3><p>A: 是為了讓程式解析成「這邊要回傳一個物件」，而不是「程式碼區塊」，如下方範例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineStore</span>(<span class="string">&#x27;counterStore&#x27;</span>, &#123;</span><br><span class="line"> <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;),</span><br><span class="line"></span><br><span class="line"> <span class="comment">//等同</span></span><br><span class="line"> <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://pinia.vuejs.org/">Pinia 官方文件</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Pinia </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue Router - 實現 SPA 架構</title>
      <link href="/2024/02/15/vue_router/"/>
      <url>/2024/02/15/vue_router/</url>
      
        <content type="html"><![CDATA[<p>Vue Router 是由官方提供的前端路由管理工具，路由又可分為前端、後端路由。本文章介紹的 Vue Router 會著重在由前端模擬的路由，以實現 SPA 架構，</p><h2 id="前端路由與後端路由"><a href="#前端路由與後端路由" class="headerlink" title="前端路由與後端路由"></a>前端路由與後端路由</h2><p>兩者的主要差別是網址格式、頁面渲染方式。</p><h3 id="網址格式"><a href="#網址格式" class="headerlink" title="網址格式"></a>網址格式</h3><ul><li>前端路由網址會有<code>#</code>符號：<code>https://www.store.com/#/user</code></li><li>後端路由網址：<code>https://www.store.com/user</code></li></ul><h3 id="頁面渲染方式"><a href="#頁面渲染方式" class="headerlink" title="頁面渲染方式"></a>頁面渲染方式</h3><h4 id="後端路由：完整的頁面往前端傳遞"><a href="#後端路由：完整的頁面往前端傳遞" class="headerlink" title="後端路由：完整的頁面往前端傳遞"></a>後端路由：完整的頁面往前端傳遞</h4><ol><li>瀏覽器發出請求給伺服器</li><li>首先 Router 會判斷使用者進入的路由，並告知 Controller 要取得的資料</li><li>接著 Controller 透過 Model 從資料庫撈出資料，同時從 View 取得相關版型，最後將資料渲染到頁面上，並回傳給伺服器</li><li>伺服器再把完整的頁面渲染給瀏覽器</li></ol><h4 id="前端路由：由前端模擬的路由，同一區塊在不同頁面時「不會」重新渲染"><a href="#前端路由：由前端模擬的路由，同一區塊在不同頁面時「不會」重新渲染" class="headerlink" title="前端路由：由前端模擬的路由，同一區塊在不同頁面時「不會」重新渲染"></a>前端路由：由前端模擬的路由，同一區塊在不同頁面時「不會」重新渲染</h4><ol><li>透過網址指定路由後</li><li>查找路由表裡，該路由對應的檔案路徑</li><li>接著渲染到畫面上</li></ol><p>接下來介紹 Vue Router 的使用方式。</p><h2 id="Vue-Router-使用流程"><a href="#Vue-Router-使用流程" class="headerlink" title="Vue Router 使用流程"></a>Vue Router 使用流程</h2><p>可以在純 HTML 中使用，或是構建工具 Vite、Vue cli 中使用，簡化步驟如下：</p><ol><li>引入 Vue Router 資源</li><li>定義元件</li><li>定義路由表</li><li>加入對應連結</li></ol><blockquote><p>建議都先將元件建好後，再放到路由表裡，較容易偵錯</p></blockquote><p>下面分別說明純 HTML 和搭配 Vite 構建工具的詳細操作：</p><h3 id="使用方式一、純-HTML-版本"><a href="#使用方式一、純-HTML-版本" class="headerlink" title="使用方式一、純 HTML 版本"></a>使用方式一、純 HTML 版本</h3><ol><li>引入 Vue Router</li></ol><ul><li>使用 CDN 引入 Vue Router，這樣在純 HTML 也可以使用</li><li>記得引用位置要放在 Vue 之後</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>路由示範<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router@4.0.15/dist/vue-router.global.js.&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">counter</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">text</span>: <span class="string">&quot;這裡有一段文字&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//路由設定</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> router = <span class="title class_">VueRouter</span>.<span class="title function_">creteRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 網址路徑模式，使用網址 hash 的形式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// createWebHashHistory 代表路由是由前端模擬</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">history</span>: <span class="title class_">VueRouter</span>.<span class="title function_">createWebHashHistory</span>(),</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 匯入路由表</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">router</span>: [],</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  app.<span class="title function_">use</span>(router);</span></span><br><span class="line"><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>定義元件與路由表</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> componentA = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;A&lt;/div&gt;`</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> componentB = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;B&lt;/div&gt;`</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title class_">VueRouter</span>.<span class="title function_">creteRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title class_">VueRouter</span>.<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  <span class="attr">router</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//定義路徑</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/a&quot;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">//定義元件</span></span><br><span class="line">      <span class="attr">component</span>: componentA,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/b&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: componentB,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>加入對應連結，供使用者點擊</li></ol><p>使用 <code>&lt;router-link&gt;</code> 標籤，to 屬性則是寫入路由表的 path 路徑</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/a&quot;</span>&gt;</span>a<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/b&quot;</span>&gt;</span>b<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用方式二、搭配-Vite"><a href="#使用方式二、搭配-Vite" class="headerlink" title="使用方式二、搭配 Vite"></a>使用方式二、搭配 Vite</h3><ol><li><p>路由表寫入以下內容，會放在 router 資料夾裡的 index.js 檔案</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;../views/Home.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;首頁&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>在 main.js 引入 Vue Router</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>到 App.vue 檔案中放入 <code>&lt;router-view&gt;</code> 標籤</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;首頁&#x27; &#125;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="路由表常見屬性"><a href="#路由表常見屬性" class="headerlink" title="路由表常見屬性"></a>路由表常見屬性</h2><ul><li><code>path</code>：寫入路由，第一層的 path 屬性最前方必須加上 <code>/</code>，例如 &#x2F;product</li><li><code>name</code>：可以寫入中文名稱，也可用來切換路由，使用方式如下：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 直接寫入路由 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 動態寫入 name 屬性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;首頁&#x27; &#125;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>component</code>：寫入要渲染的元件（該元件通常放置在 views 資料夾中），可以透過 import 定義的名稱，或是使用箭頭函式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 箭頭函式</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/product&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;產品頁面&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Product.vue&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import 方式</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Product</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Product.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//... 省略</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/product&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;產品頁面&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">Product</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//... 省略</span></span><br></pre></td></tr></table></figure><ul><li><code>children</code>：陣列形式，可在路由裡再放入子路由，裡面的 path 屬性不用寫入 <code>/</code></li></ul><h2 id="Vue-常見應用"><a href="#Vue-常見應用" class="headerlink" title="Vue 常見應用"></a>Vue 常見應用</h2><h3 id="應用一、巢狀路由"><a href="#應用一、巢狀路由" class="headerlink" title="應用一、巢狀路由"></a>應用一、巢狀路由</h3><p>適合使用在當多個頁面裡有共用元件，只想要切換部分畫面時</p><ol><li>建立子元件</li><li>在路由表新增巢狀路由表，使用 <code>children</code> 屬性引入子元件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title class_">VueRouter</span>.<span class="title function_">creteRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title class_">VueRouter</span>.<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  <span class="attr">router</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/newPage&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="string">&quot;../views/NewPage.vue&quot;</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">          <span class="attr">component</span>: componentA,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">          <span class="attr">component</span>: componentB,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>在外層元件加入 <code>&lt;router-view&gt;</code> 和 <code>&lt;router-link&gt;</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-4&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/newPage/a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">routerLink</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/newPage/b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">routerLink</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="應用二、具名視圖"><a href="#應用二、具名視圖" class="headerlink" title="應用二、具名視圖"></a>應用二、具名視圖</h3><p>一般情況下，一個元件裡面只有一個 router-view，但如果要在同一個元件下引入多個 router-view，就需要使用具名視圖的手法</p><ol><li>建立子元件</li><li>在元件中放入多個 <router-view>，會需要知道哪個元件是放在哪個 router-view，需要寫入 <code>name</code> 屬性，該屬性之後會用來識別子元件要載入的 router-view</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-6&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>路由表中在元件裡透過 <code>children</code> 屬性引入子元件<ul><li>並在子元件裡寫入 <code>components</code> 屬性，值是一個物件</li><li>物件屬性寫入先前命名的 name 屬性值，並引入對應的子元件檔案</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title class_">VueRouter</span>.<span class="title function_">creteRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title class_">VueRouter</span>.<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  <span class="attr">router</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/b&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: componentB,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;c2d&quot;</span>,</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 使用 components 載入多個元件</span></span><br><span class="line">          <span class="attr">components</span>: &#123;</span><br><span class="line">            <span class="comment">//填入 name 的值，並引入對應的子元件檔案</span></span><br><span class="line">            <span class="attr">left</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/ComponentC.vue&quot;</span>),</span><br><span class="line">            <span class="attr">right</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/ComponentD.vue&quot;</span>),</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;d2c&quot;</span>,</span><br><span class="line">          <span class="attr">components</span>: &#123;</span><br><span class="line">            <span class="attr">left</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/ComponentD.vue&quot;</span>),</span><br><span class="line">            <span class="attr">right</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/ComponentC.vue&quot;</span>),</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="應用三、動態路由"><a href="#應用三、動態路由" class="headerlink" title="應用三、動態路由"></a>應用三、動態路由</h3><p>可以產生多個頁面，常用於建立 100 個商品的詳細頁面</p><ol><li>在路由表使用 <code>:</code> 加入動態路由，後方可以是自定義名稱</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元件檔案</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title class_">VueRouter</span>.<span class="title function_">creteRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title class_">VueRouter</span>.<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  <span class="attr">router</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 加入 : 轉換為動態路由</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/product/:id&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: componentProduct,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>補充：元件裡面也可取出動態路由的參數值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 取得目前網址路徑的特定參數</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用 props</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title class_">VueRouter</span>.<span class="title function_">creteRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title class_">VueRouter</span>.<span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  <span class="attr">router</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 加入 : 轉換為動態路由</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/product/:id&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: componentProduct,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 透過 props 即時取得目前動態路由的內容</span></span><br><span class="line">      <span class="attr">props</span>: <span class="function">(<span class="params">route</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(&quot;route&quot;, route);</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">id</span>: route.<span class="property">params</span>.<span class="property">id</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元件檔案</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 這裡的 id 會取得在路由表裡定義好的 id</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="應用四：預設路徑與重新導向"><a href="#應用四：預設路徑與重新導向" class="headerlink" title="應用四：預設路徑與重新導向"></a>應用四：預設路徑與重新導向</h3><p>若沒有設定 404 頁面，若進入錯誤路徑會出現空白頁面，建議在路由表中設定重導向、或是出現 404 頁面。</p><ul><li>404 頁面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 任意路徑下若無此路由就出現 404 頁面</span></span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/:pathMatch(.*)*&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/NotFound.vue&#x27;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重新導向</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 在 newPage 路徑下若無此路由就重導向到首頁</span></span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/newPage/:pathMatch(.*)*&#x27;</span>,</span><br><span class="line">  <span class="attr">redirect</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他路由表選項"><a href="#其他路由表選項" class="headerlink" title="其他路由表選項"></a>其他路由表選項</h3><ul><li><code>scrollBehavior</code>：可以每次切換頁面時，都要觸發回到頁面頂部</li><li><code>linkActiveClass</code>：為目前所在的路由加上指定樣式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">linkActiveClass</span>: <span class="string">&quot;active&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 切換頁面時會觸發</span></span><br><span class="line">  <span class="title function_">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savePosition</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(to, <span class="keyword">from</span>, savePosition);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// to 和 from 都是路由地址，savePosition 預設是 null</span></span><br><span class="line">    <span class="comment">// 當路徑符合 product 時，就滾動到頁面最上方</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">fullPath</span>.<span class="title function_">match</span>(<span class="string">&quot;product&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">top</span>: <span class="number">0</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他路徑就維持預設</span></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="route-與-router-的差別"><a href="#route-與-router-的差別" class="headerlink" title="$route 與 $router 的差別"></a><code>$route</code> 與 <code>$router</code> 的差別</h1><ul><li><code>$route</code>：當前路由的資訊</li><li><code>$router</code>：該路由可以使用的方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$route</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$router</span>)</span><br></pre></td></tr></table></figure><h2 id="route-常用屬性"><a href="#route-常用屬性" class="headerlink" title="$route 常用屬性"></a>$route 常用屬性</h2><ul><li><code>fullPath</code>：完整網址路徑</li><li><code>params</code>：傳入的參數</li><li><code>query</code>：搜尋的內容</li></ul><h2 id="router"><a href="#router" class="headerlink" title="$router"></a>$router</h2><p>包含很多方法，通常會在元件中建立函式來使用這些方法</p><h3 id="範例-1：切換頁面"><a href="#範例-1：切換頁面" class="headerlink" title="範例 1：切換頁面"></a>範例 1：切換頁面</h3><ul><li><p>push：會包含歷史紀錄，可以回到上一頁</p><ul><li><p>代入路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/home&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>帶入 name 屬性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;首頁&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>replace：沒有歷史紀錄</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(<span class="string">&#x27;/home&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="範例-2：操作歷史紀錄"><a href="#範例-2：操作歷史紀錄" class="headerlink" title="範例 2：操作歷史紀錄"></a>範例 2：操作歷史紀錄</h3><ul><li>go</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回到上一頁</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 到下一頁</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h1 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h1><ul><li><a href="https://next.router.vuejs.org/">官方文件</a></li><li><a href="https://next.router.vuejs.org/zh/index.html">中文版官方文件</a></li></ul><blockquote><p>注意：Vue 3 搭配的 Router 版本在網址中會有 “next” 的字樣，而 <a href="http://router.vuejs.org/">router.vuejs.org</a> 是 Vue 2 版本的路由</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《6 區塊黃金比例時間分配法》讀後感</title>
      <link href="/2023/10/01/reading_block6/"/>
      <url>/2023/10/01/reading_block6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>「時間管理本身並不是重點，重要的是如何透過時間管理，記住自己想要怎樣的人生。」</p></blockquote><p>作者提出的「六區塊時間管理系統」（也可稱為 Block 6），是以目標為導向，將一天的時間切分成六個區塊，與一般常見以小時或分鐘規劃時間的方式大為不同。這麼做的好處是：</p><ul><li>比較容易在睡前回憶起今天完成的事項，帶來成就感</li><li>即使事情完成時間超過預期規劃，也不會感到挫折</li></ul><h2 id="Block-6-重要概念"><a href="#Block-6-重要概念" class="headerlink" title="Block 6 重要概念"></a>Block 6 重要概念</h2><h3 id="1-將一天切分成-6-個區塊，將時間視覺化"><a href="#1-將一天切分成-6-個區塊，將時間視覺化" class="headerlink" title="1. 將一天切分成 6 個區塊，將時間視覺化"></a>1. 將一天切分成 6 個區塊，將時間視覺化</h3><p>這麼做能確實感受到時間的有限性，像是房間裡如果東西太多，能夠一眼看出很壅擠，需要來場大掃除，這樣就不會把事情毫無限制塞進待辦清單裡。</p><h3 id="2-回顧比起規劃未來更加重要"><a href="#2-回顧比起規劃未來更加重要" class="headerlink" title="2. 回顧比起規劃未來更加重要"></a>2. 回顧比起規劃未來更加重要</h3><p>時間具有連貫性，上週的作息很可能延續到未來，回顧可以有意識地覺察到自己先前的行動，並嘗試在這週改變。</p><h3 id="3-做出取捨"><a href="#3-做出取捨" class="headerlink" title="3. 做出取捨"></a>3. 做出取捨</h3><p>一天切割成 6 格，一週也只會有 42 格，須不斷反問自己最想做的事是什麼，來做出取捨，就能將重點放在「價值」，而非時間。</p><h2 id="彈性管理時間的方法"><a href="#彈性管理時間的方法" class="headerlink" title="彈性管理時間的方法"></a>彈性管理時間的方法</h2><p>除此之外，書裡面還有分享很多進行 Block 6 時，可以更順利達成目標的方法，也提到目標可以如何設定，還有很多真實案例，都能夠幫助讀者了解此方法如何達到理想生活。</p><p>原本以為這本書只會談到時間管理的方法，也提及到很多時間管理可以保有「彈性」的作法，以下挑出幾個我認為很受用的論點：</p><h3 id="為事情制定-A-計畫和-B-計畫"><a href="#為事情制定-A-計畫和-B-計畫" class="headerlink" title="為事情制定 A 計畫和 B 計畫"></a>為事情制定 A 計畫和 B 計畫</h3><p>A 計畫負責成長，逐漸提高習慣的難度，避免自身停滯不前；B 計畫功能則是維持動力，只執行 A 計畫最核心的部分。</p><p>作者在書中舉例了如果在排定的時間裡，某些事情因為一些不可控因素而難以實施，就可以先以 B 計畫替代，這樣的好處是，事情不會中斷進行，而 A 計畫又關注了自身成長，不會有原地踏步的感覺。</p><h3 id="安排一天裡每個區塊的能量高低"><a href="#安排一天裡每個區塊的能量高低" class="headerlink" title="安排一天裡每個區塊的能量高低"></a>安排一天裡每個區塊的能量高低</h3><p>一天的精力不可能都維持在最佳狀態，因此可安排某些區塊需要專注，而不是每個區塊都卯足全力，容易能量耗盡。</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>過去我總是為了完成很多事，不斷新增待辦事項，任由自己淹沒在必須做的事情裡，忽略了內心想法，而過著看似充實、卻感到空虛的生活，如果當天有待辦事項沒有做完，就會覺得今天過得很糟。</p><p>這本書將我從「侷促」和「無力感」中解放出來，在完成目標的同時仍能保有餘裕。如果你也對時間管理感到煩惱，這本書或許可以帶給你新的想法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 閱讀 </tag>
            
            <tag> 時間管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《間歇高效率的三次閱讀法》讀後感</title>
      <link href="/2023/09/29/reading_threetime/"/>
      <url>/2023/09/29/reading_threetime/</url>
      
        <content type="html"><![CDATA[<p>一開始閱讀這本書時，我還是使用舊有方式，從第一頁逐頁閱讀到最後一頁，才看完第一章，發現自己的閱讀毛病都被作者講中，有如芒刺在背。</p><p>像是沒有依據書籍類型調整閱讀方式，導致閱讀續航力弱，常常只讀前兩章就中斷；又或是看不懂就卡住，直接放棄閱讀整本書；或者是企圖記住書本全部內容，最後一個重點都想不起來。</p><p>這本書打破了我對閱讀的看法，接下來就一起來瞭解「三次閱讀法」究竟是什麼吧。</p><h2 id="一、區分書籍類型"><a href="#一、區分書籍類型" class="headerlink" title="一、區分書籍類型"></a>一、區分書籍類型</h2><p>書籍可以區分成「散步」和「登山」類型的書籍。散步指的是文學作品，適合慢慢閱讀；而登山指的是商業書、學術書等類型，適合擷取重點。</p><p>這本書提供的三次閱讀法較適合使用在「登山」類型，以往的我無論書籍類型，都是使用散步模式，難怪閱讀商業書籍時常常半途而廢。</p><p>作者也有提到如果發現這本書含金量很高，可以再改為使用散步模式看完。</p><h2 id="二、使用「三次閱讀法」"><a href="#二、使用「三次閱讀法」" class="headerlink" title="二、使用「三次閱讀法」"></a>二、使用「三次閱讀法」</h2><p>三次閱讀法是指「在 100 分鐘內將一本書閱讀三次，目標是擷取出書中的精華內容，且三次的閱讀方式都不同」，以下簡單說明每次的閱讀所著重的部分：</p><h3 id="第一次：10-分鐘-抓出整體架構"><a href="#第一次：10-分鐘-抓出整體架構" class="headerlink" title="第一次：10 分鐘 - 抓出整體架構"></a>第一次：10 分鐘 - 抓出整體架構</h3><p>第一次的閱讀重點在於抓取整本書架構，一方面可以知道這本書是否符合自己的需求，也不會被作者的論點牽著走、閱讀時也能有目標。</p><p>將注意力先放在目錄、作者背景，和最後一章，作者通常會將書中最重要的觀點在最後覆述一遍，以及每個章節的大略內容，通常可先看第一段和最後一段。</p><h3 id="第二次：50-分鐘-既宏觀、亦微觀"><a href="#第二次：50-分鐘-既宏觀、亦微觀" class="headerlink" title="第二次：50 分鐘 - 既宏觀、亦微觀"></a>第二次：50 分鐘 - 既宏觀、亦微觀</h3><p>依循第一次閱讀時找到的架構，閱讀重點內容，並在感興趣的段落畫線。</p><h3 id="第三次：40-分鐘-深入內容"><a href="#第三次：40-分鐘-深入內容" class="headerlink" title="第三次：40 分鐘 - 深入內容"></a>第三次：40 分鐘 - 深入內容</h3><p>需要接續第二次的閱讀，做更深入的閱讀，將自身想法與作者觀點對話。</p><p>若有衍生的想法或是觸類旁通、質疑的地方，都可以直接寫在書本內頁的空白，建議在兩句話以內說完，寫太多的話可能是想法還不夠清晰。</p><h3 id="三次閱讀法是有彈性的"><a href="#三次閱讀法是有彈性的" class="headerlink" title="三次閱讀法是有彈性的"></a>三次閱讀法是有彈性的</h3><p>書中也有提到，三次閱讀沒辦法一天內做完也沒關係。</p><p>可以三次分開進行，在一天不同時段或是一週內完成；又或是帶三本書，每本都先進行第一次的閱讀都可以。</p><p>除此之外，還可以做兩件事提升閱讀效果：</p><ul><li><p>進行三次閱讀法之前，先思考為什麼會想讀這本書，並提出問題，後續大腦就會有意識在書中搜尋相關內容。</p></li><li><p>閱讀完後，分享或是教導他人，對書本內容的記憶會更加穩固。</p></li></ul><h2 id="閱讀時間需要特意規劃"><a href="#閱讀時間需要特意規劃" class="headerlink" title="閱讀時間需要特意規劃"></a>閱讀時間需要特意規劃</h2><p>書中有提到很重要的一點，閱讀時間是必須刻意規劃的。一方面是零碎時間很難管理、也比較沒有規律性，很可能會將閱讀這件事不斷往後移。</p><p>零碎時間可以當成禮物，但不能期待每天都有，閱讀能夠增進個人思維與眼界，是件值得特意投入的事。</p><h2 id="分享書中節錄"><a href="#分享書中節錄" class="headerlink" title="分享書中節錄"></a>分享書中節錄</h2><h3 id="🔖-最喜歡的段落"><a href="#🔖-最喜歡的段落" class="headerlink" title="🔖 最喜歡的段落"></a>🔖 最喜歡的段落</h3><blockquote><p>「讀到後來，同一本書會孕育出截然不同的著作，雖然物理上還是只有一本書，但抱持著獨立思考的精神，將自己的觀點與作者的觀點相互激盪，會創造出另一本你與作者的共同著作。」</p></blockquote><p>這段我覺得既浪漫、又點出了閱讀的意義和樂趣，每本書到了不同的人手上，物理上是同一本書，但是每個人對書本會有不同理解，因此書本成為了獨一無二的存在。</p><h3 id="🔖-醍醐灌頂的三句話"><a href="#🔖-醍醐灌頂的三句話" class="headerlink" title="🔖 醍醐灌頂的三句話"></a>🔖 醍醐灌頂的三句話</h3><blockquote><p>「追尋正確答案是在傷害自己的思考能力、決策能力、行動能力，害你不能創造自己的正確答案。」</p></blockquote><blockquote><p>「反覆閱讀比專注更重要，千萬不要把專注力神化。」</p></blockquote><blockquote><p>「不能把所有時間都用來理解，而是要理解後，再抒發自己的意見。」</p></blockquote><p>選擇這三段話的理由是，自己常常發生當下雖然專注，過了幾天還是什麼都記不得，又或是輸入太多，卻沒有任何輸出，導致知識在大腦裡都是船過水無痕，這幾段話精準點出我的毛病，並提出解決方式。</p><h2 id="提問"><a href="#提問" class="headerlink" title="提問"></a>提問</h2><p>最後，分享我對這本書提出的提問，以及在書裡找到的回答：</p><h3 id="Q-如何縮短閱讀時間？"><a href="#Q-如何縮短閱讀時間？" class="headerlink" title="Q. 如何縮短閱讀時間？"></a>Q. 如何縮短閱讀時間？</h3><p>A: 設定閱讀時限、認知閱讀也有方法論、文章有既定的架構</p><h3 id="Q-有效記憶書本內容的方法？"><a href="#Q-有效記憶書本內容的方法？" class="headerlink" title="Q. 有效記憶書本內容的方法？"></a>Q. 有效記憶書本內容的方法？</h3><p>A: 有以下幾種方法：</p><ul><li>嘗試使用三次閱讀法</li><li>主動閱讀，包括設定閱讀目標、提問、抱持自身觀點與作者對話</li><li>紀錄佳句，以及閱讀時觸發的想法、對作者的質疑都可以寫在書頁空白處，建議兩句話以內</li><li>看出作者的思考模式</li><li>分享給別人</li></ul><h3 id="Q-如何評估閱讀成果？"><a href="#Q-如何評估閱讀成果？" class="headerlink" title="Q. 如何評估閱讀成果？"></a>Q. 如何評估閱讀成果？</h3><p>A: 是否能歸納出三個重點？或是使用一句話歸納出這本書的重點、認為這本書最重要的一句話是什麼？</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>作者本身是以 60 分鐘完成三次閱讀，但考量到初學者，可以先以 100 分鐘為目標，三次閱讀也不用一次性達成，我認為這個閱讀法蠻有彈性，也容易達成。</p><p>這本書讓我在「閱讀」這件事上有很多新看法，最可貴的是突破了許多閱讀盲點，也推薦《間歇高效率的三次閱讀法》這本書給大家。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 閱讀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Material Icons 引入攻略</title>
      <link href="/2023/08/22/helper_material-icons/"/>
      <url>/2023/08/22/helper_material-icons/</url>
      
        <content type="html"><![CDATA[<p>Material Icons 是 Google 提供的免費圖示資源，主要分成五種類別，分別是 Filled、Outlined、Rounded、Sharp、Two tone。</p><p>但官方文件僅提到 Filled 類別的引用方式，沒有提到其他類別的 CDN 與 font-family 的設定，本文將會詳細紀錄這些部分，另外還會提到如何透過偽元素加入 Material Icons。</p><h2 id="步驟一：使用-CDN-​引入-Material-Icons"><a href="#步驟一：使用-CDN-​引入-Material-Icons" class="headerlink" title="步驟一：使用 CDN ​引入 Material Icons"></a>步驟一：使用 CDN ​引入 Material Icons</h2><h3 id="1-在-引入該類別的-CDN"><a href="#1-在-引入該類別的-CDN" class="headerlink" title="1. 在 &lt;head&gt; 引入該類別的 CDN"></a>1. 在 <code>&lt;head&gt;</code> 引入該類別的 CDN</h3><p>官方文件主要以 Filled 類別做示範，沒有提到其他類別的 CDN 路徑，筆者嘗試過後發現規則，是在<strong>原來的 CDN 連結後面加入 [+類別名稱]（但 Rounded 是例外）</strong>，紀錄如下：</p><ul><li><p>Filled：不用加入任何類別，預設就是 Filled 類別的 icon</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Outlined</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/icon?family=Material+Icons+Outlined&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Rounded：要特別注意是加入 Round，不是 Rounded</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/icon?family=Material+Icons+Round&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Sharp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/icon?family=Material+Icons+Sharp&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Two tone：需要拆開兩個單字，再加入到 CDN 裡</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/icon?family=Material+Icons+Two+Tone&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-到-Google-Icons-找尋指定-icon"><a href="#2-到-Google-Icons-找尋指定-icon" class="headerlink" title="2. 到 Google Icons 找尋指定 icon"></a>2. 到 Google Icons 找尋指定 icon</h3><p>前往 <a href="https://fonts.google.com/icons?icon.set=Material+Icons">Material Icons 官網</a>，點擊 icon 後會開啟右方的面板，複製紅框處的程式碼，就能接續下個步驟引入到自己的網頁中，兩個方法擇一即可。</p><h2 id="步驟二：引入到-HTML-中"><a href="#步驟二：引入到-HTML-中" class="headerlink" title="步驟二：引入到 HTML 中"></a>步驟二：引入到 HTML 中</h2><h3 id="方法1：直接貼入程式碼"><a href="#方法1：直接貼入程式碼" class="headerlink" title="方法1：直接貼入程式碼"></a>方法1：直接貼入程式碼</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;material-icons-outlined&quot;</span>&gt;</span> search <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方法2：透過偽元素寫入到-HTML-中"><a href="#方法2：透過偽元素寫入到-HTML-中" class="headerlink" title="方法2：透過偽元素寫入到 HTML 中"></a>方法2：透過偽元素寫入到 HTML 中</h3><p>很適合用在有大量重複的 icon，例如列表圖案。這裡的<code>font-family</code>是重點，如果沒有寫入正確的值就不會有效果，但在官方文件中也是除了 Filled 之外，沒有提到不同類別的 font-family的命名，測試後整理如下：</p><ul><li>Filled:<code>&quot;Material Icons&quot;</code></li><li>Outlined:<code>&quot;Material Icons Outlined&quot;</code></li><li>Sharp:<code>&quot;Material Icons Sharp&quot;</code></li><li>Rounded:<code>&quot;Material Icons Round&quot;</code></li><li>Two tone:<code>&quot;Material Icons Two Tone&quot;</code></li></ul><p>另外偽元素的 content 要寫入 Icon font 欄位裡的名稱，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.list-icon li::before &#123;</span><br><span class="line">  content: &quot;search&quot;;</span><br><span class="line">  font-family: &quot;Material Icons Outlined&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p>這邊也附上完整的程式碼，供大家複製過去看看效果～</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-Hant&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/icon?family=Material+Icons+Outlined&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.list-icon</span> <span class="selector-tag">li</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&quot;lightbulb&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&quot;Material Icons Outlined&quot;</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;material-icons-outlined&quot;</span>&gt;</span> search <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list-icon&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>項目1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>項目2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>項目3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常見問題"><a href="#常見問題" class="headerlink" title="常見問題"></a>常見問題</h2><h3 id="Q-如何放大-Icon？"><a href="#Q-如何放大-Icon？" class="headerlink" title="Q.如何放大 Icon？"></a>Q.如何放大 Icon？</h3><p>A: 使用 <code>font-size</code> 屬性就可以囉！</p><h3 id="Q-為什麼無法成功引入-Material-Icons？"><a href="#Q-為什麼無法成功引入-Material-Icons？" class="headerlink" title="Q.為什麼無法成功引入 Material Icons？"></a>Q.為什麼無法成功引入 Material Icons？</h3><p>A: 可以檢查以下幾個部分：</p><ol><li>CDN 有無引入，以及引入的類別是否正確</li><li>material-icons 的 class 是否正確</li><li>如果有使用偽元素，必須確認 <code>font-family</code> 屬性是否設定正確、<code>content</code> 屬性有寫入正確的 icon 名稱</li></ol><h3 id="Q-Material-Icons-和-Material-Symbols-有什麼差別？"><a href="#Q-Material-Icons-和-Material-Symbols-有什麼差別？" class="headerlink" title="Q.Material Icons 和 Material Symbols 有什麼差別？"></a>Q.Material Icons 和 Material Symbols 有什麼差別？</h3><p>A: 都是由 Google 推出，但 Material Icons 出現時間更早，且圖示為固定樣式，不能設定線條粗細、是否填滿等屬性；Symbols 則是可以透過參數修改部分設定，之後也會寫一篇介紹 Material Symbols 的使用方式。</p><br><p>今天就介紹到這裡，希望大家都能順利引入！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 第三方資源 </tag>
            
            <tag> Icon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Material Symbols 使用攻略</title>
      <link href="/2023/07/05/helper_material-symbols/"/>
      <url>/2023/07/05/helper_material-symbols/</url>
      
        <content type="html"><![CDATA[<p>開發網頁時經常會使用到 Google 的 Material Symbols 服務，但大多都是直接引入預設設定，頂多透過官方提供的簡易編輯器，調整 icon 樣式。</p><p>在仔細看了官方文件之後，發現還有一些設定可以在程式碼中調整，使用上更加彈性，因此寫了這篇文章記錄下來。Material Symbols 有分成三個基本類型，分別為：</p><ul><li>Outlined：一般</li><li>Rounded：線條較圓潤</li><li>Sharp：線條較尖銳</li></ul><p>並附上各類別的 CDN（文章主要會以 Outlined 類別來示範）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Outlined</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">// Rounded</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@24,400,0,0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">// Sharp</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Material+Symbols+Sharp:opsz,wght,FILL,GRAD@24,400,0,0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到 href 屬性裡的最後方有一些參數 <code>opsz,wght,FILL,GRAD@24,400,0,0</code>，後面也會解釋這段的用途。如果使用 Material Symbols 時曾有過以下疑問，這篇都會提到：</p><ul><li>FILL, wght, GRAD, opsz 這些東西代表什麼意義？</li><li>在一個網頁中如何同時引入填滿與線框樣式的 icon？</li></ul><p>接下來就讓我們進入第一個問題，來了解 FILL, wght, GRAD, opsz 等參數。</p><h2 id="Material-Symbols-各個軸線的意義"><a href="#Material-Symbols-各個軸線的意義" class="headerlink" title="Material Symbols 各個軸線的意義"></a>Material Symbols 各個軸線的意義</h2><p>在 Material Symbols 中控制 icon 樣式，主要透過以下四個軸線：</p><h3 id="FILL-軸：控制-icon-樣式是否填滿"><a href="#FILL-軸：控制-icon-樣式是否填滿" class="headerlink" title="FILL 軸：控制 icon 樣式是否填滿"></a>FILL 軸：控制 icon 樣式是否填滿</h3><ul><li>數值只有 0 和 1，0 代表無填滿，1 代表填滿的 icon</li><li>預設值為 0</li></ul><h3 id="wght-軸：控制筆畫粗細"><a href="#wght-軸：控制筆畫粗細" class="headerlink" title="wght 軸：控制筆畫粗細"></a>wght 軸：控制筆畫粗細</h3><ul><li>數值範圍介於 100~700 之間，數字越大筆畫越粗</li><li>會影響到符號的整體大小</li></ul><h3 id="GRAD-軸"><a href="#GRAD-軸" class="headerlink" title="GRAD 軸"></a>GRAD 軸</h3><ul><li>數值介於 -25~200 之間</li></ul><p>實際操作過覺得蠻像效果沒那麼顯著的 wght，查看官方文件有提到使用時機：</p><ul><li>-25：可用在深色背景，減少眩光</li><li>200：讓符號更佳醒目</li></ul><h3 id="opsz-軸"><a href="#opsz-軸" class="headerlink" title="opsz 軸"></a>opsz 軸</h3><ul><li>數值介於 20dp 到 48dp 之間</li><li>筆畫粗細會自動跟著圖示大小改變</li></ul><p>如果想實際查看各個軸線調整後的效果，<a href="https://fonts.google.com/icons">官方網站</a>有提供編輯器，可以調整數值看看效果。</p><h2 id="Material-Symbols-引入方式"><a href="#Material-Symbols-引入方式" class="headerlink" title="Material Symbols 引入方式"></a>Material Symbols 引入方式</h2><p>有三種方法，差別在於是否需要在程式碼中改變 icon 樣式，與下載到本地使用。</p><ul><li>Google Fonts API - 使用預設設定（無法在程式碼變更 icon 樣式）</li><li>Google Fonts API - 載入變數字體</li><li>下載到本地</li></ul><h3 id="方法一：Google-Fonts-API-使用預設設定"><a href="#方法一：Google-Fonts-API-使用預設設定" class="headerlink" title="方法一：Google Fonts API - 使用預設設定"></a>方法一：Google Fonts API - 使用預設設定</h3><p>這種方法可以先在 Google Fonts 提供的編輯器做微調，但引入到程式碼中就無法進行更改，若網頁中全部 icon 都是相同樣式，可以採用該方法。只需要在 HTML 文件的 <head> 裡放入以下語法，即完成引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>若沒有做任何微調，各個軸線的預設值分別為（也可以觀察上方的連結數值）：</p><ul><li>wght：400</li><li>GRAD：0</li><li>FILL：0</li><li>opsz：24</li></ul><h3 id="方法二：Google-Fonts-API-載入變數字型"><a href="#方法二：Google-Fonts-API-載入變數字型" class="headerlink" title="方法二：Google Fonts API - 載入變數字型"></a>方法二：Google Fonts API - 載入變數字型</h3><p>此方式可以在程式碼中透過這四個軸，個別設定 icon，當網頁中的 icon 有不同樣式，建議使用此方法。一樣在 HTML 裡的 <head> 標籤放入以下語法，即完成引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>上面網址裡最後出現的 number..number，代表的是數值使用範圍，例如 20..48，表示的就是 20~48 數值皆可使用，且對應的是 opsz 軸。</p><p>可以與方法一的網址比較看看不同：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">opsz,wght,<span class="variable constant_">FILL</span>,<span class="variable constant_">GRAD</span>@<span class="number">24</span>,<span class="number">400</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">opsz,wght,<span class="variable constant_">FILL</span>,<span class="variable constant_">GRAD</span>@<span class="number">20.</span><span class="number">.48</span>,<span class="number">100.</span><span class="number">.700</span>,<span class="number">0.</span><span class="number">.1</span>,-<span class="number">50.</span><span class="number">.200</span></span><br></pre></td></tr></table></figure><h3 id="方法三：下載到本地"><a href="#方法三：下載到本地" class="headerlink" title="方法三：下載到本地"></a>方法三：下載到本地</h3><ol><li>到<a href="https://github.com/google/material-design-icons/tree/master/variablefont">官方 Github</a>下載需要的字型檔案</li><li>在 CSS 中引入檔案<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Material Symbols Outlined&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">/material-symbols.woff</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>額外在 CSS 中寫入樣式：因為前面兩個方法是從官方提供的 API 直接引入 icon，預設已帶有這些設定，現在要自行下載到本地使用，所以設定要另外自己加上去。如果沒有以下設定，Material Symbols 會跑不出來。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.material-symbols-outlined</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Material Symbols Outlined&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;  <span class="comment">/* Preferred icon size */</span></span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">text-transform</span>: none;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: normal;</span><br><span class="line">  <span class="attribute">word-wrap</span>: normal;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">direction</span>: ltr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>介紹到這邊，大致上可以了解 Material Symbols 的設定和使用方式，下面我們來一個狀況題吧。</p><h2 id="狀況題：在同一網頁載入填滿-線框-icon"><a href="#狀況題：在同一網頁載入填滿-線框-icon" class="headerlink" title="狀況題：在同一網頁載入填滿 &#x2F; 線框 icon"></a>狀況題：在同一網頁載入填滿 &#x2F; 線框 icon</h2><p>這邊使用「方法二 Google Fonts API - 載入變數字型」來進行</p><ol><li>引入變數字型<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li>在程式碼中自定義樣式，這步驟有兩種做法，使用其中一種就可以囉</li></ol><h3 id="寫法一：在-HTML-標籤的-style-屬性寫入-Google-Fonts-的軸線設定"><a href="#寫法一：在-HTML-標籤的-style-屬性寫入-Google-Fonts-的軸線設定" class="headerlink" title="寫法一：在 HTML 標籤的 style 屬性寫入 Google Fonts 的軸線設定"></a>寫法一：在 HTML 標籤的 style 屬性寫入 Google Fonts 的軸線設定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 直接針對父容器做設定，裡面的 icon 都會一起吃到樣式</span><br><span class="line">// 注意這裡的 &#x27;FILL&#x27; 數值</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-variation-settings: &#x27;FILL&#x27; 0, &#x27;wght&#x27; 100, &#x27;GRAD&#x27; 0, &#x27;opsz&#x27; 48;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;material-symbols-outlined&quot;</span>&gt;</span>search<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;material-symbols-outlined&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;material-symbols-outlined&quot;</span>&gt;</span>settings<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;material-symbols-outlined&quot;</span>&gt;</span>favorite<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 注意這裡的 &#x27;FILL&#x27; 數值</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-variation-settings: &#x27;FILL&#x27; 1, &#x27;wght&#x27; 100, &#x27;GRAD&#x27; 0, &#x27;opsz&#x27; 48;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;material-symbols-outlined&quot;</span>&gt;</span>search<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;material-symbols-outlined&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;material-symbols-outlined&quot;</span>&gt;</span>settings<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;material-symbols-outlined&quot;</span>&gt;</span>favorite<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>　　</span><br></pre></td></tr></table></figure><h3 id="寫法二：使用-CSS-樣式寫入設定"><a href="#寫法二：使用-CSS-樣式寫入設定" class="headerlink" title="寫法二：使用 CSS 樣式寫入設定"></a>寫法二：使用 CSS 樣式寫入設定</h3><ul><li><p>HTML 檔案：原本樣式是使用 inline style 寫法，改為寫入 class 屬性，樣式設定都放到 CSS 檔案中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outline-icon&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;material-symbols-outlined&quot;</span>&gt;</span>search<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;material-symbols-outlined&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;material-symbols-outlined&quot;</span>&gt;</span>settings<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;material-symbols-outlined&quot;</span>&gt;</span>favorite<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fill-icon&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;material-symbols-outlined&quot;</span>&gt;</span>search<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;material-symbols-outlined&quot;</span>&gt;</span>home<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;material-symbols-outlined&quot;</span>&gt;</span>settings<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;material-symbols-outlined&quot;</span>&gt;</span>favorite<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>CSS 檔案：注意軸線的大小寫一定要相同，不然會失效，像是 ‘FILL’ 不能寫成 ‘fill’</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outline-icon</span>&#123;</span><br><span class="line">　 <span class="attribute">font-variation-settings</span>: <span class="string">&#x27;FILL&#x27;</span> <span class="number">0</span>;</span><br><span class="line">　 <span class="comment">// 如果要同時寫入多個設定</span></span><br><span class="line">　 <span class="comment">// font-variation-settings: &#x27;FILL&#x27; 0, &#x27;wght&#x27; 700;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fill-icon</span>&#123;</span><br><span class="line">   <span class="attribute">font-variation-settings</span>: <span class="string">&#x27;FILL&#x27;</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>這種寫法甚至能夠搭配 animation 語法使用，做一些簡單的動畫，可參考<a href="https://developers.google.com/fonts/docs/material_symbols?hl=zh-tw#variable_font_with_google_fonts">官方文件</a>的說明嘗試看看。</p><p>有關 Google 提供的開源圖示 Material Symbols 的分享就到這裡，感謝看完這篇的大家。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 第三方資源 </tag>
            
            <tag> Icon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《左撇子的隱形優勢》讀後感</title>
      <link href="/2023/06/30/reading_lefthand/"/>
      <url>/2023/06/30/reading_lefthand/</url>
      
        <content type="html"><![CDATA[<p>身為一個左撇子，閱讀這本書時有許多共鳴，和作者一樣，我總是會下意識觀察自己與別人有哪些不一樣。</p><p>還記得小時候第一天上學時，聽到老師說用右手拿筆，我不安地看向身旁每一個同學，大家都毫不遲疑地把筆握在右手，那時我深刻感受到自己與別人的不同，當下著急到哭了出來。</p><h2 id="左撇子在日常裡遇到的困難，無形中促進大腦成長"><a href="#左撇子在日常裡遇到的困難，無形中促進大腦成長" class="headerlink" title="左撇子在日常裡遇到的困難，無形中促進大腦成長"></a>左撇子在日常裡遇到的困難，無形中促進大腦成長</h2><blockquote><p>腦部在感受到困難時，就是腦區的新領域開始成長的訊號。</p></blockquote><p>左撇子在日常生活中會遇到許多大大小小需要克服的事情，就我個人的經驗來說，入座前會先觀察座位，如果空間很大就不要緊，但空間很小就得縮著手，或是刻意坐在左側，才能避免撞到鄰座的手；上課有時會出現桌子偏右、和椅子連在一起的座位，左手沒有支撐只得懸空，只能轉動身子，企圖為左手騰出更多空間安放，但在寫申論題時，這些努力終究是有限的，寫完千字後的左手痠疼得簡直不是我的。</p><p>又像是體育課有時會安排桌球、羽球等課程，會出現需要兩兩對打累積分數的考試，右撇子的同學會向我反應「你發的球很難接」，於是左手握拍的我開始思考，如何才能發出右撇子習慣的球路，經過多次嘗試，終於和同學一起拿到將近滿分的成績。</p><p>現在的我才知道，這些屬於左撇子的日常，都讓大腦無意間得到很多成長的機會。</p><h2 id="大部分左撇子的思緒會繞遠路"><a href="#大部分左撇子的思緒會繞遠路" class="headerlink" title="大部分左撇子的思緒會繞遠路"></a>大部分左撇子的思緒會繞遠路</h2><p>一直以來，我很難馬上將腦袋的思路立刻轉換為言語，在別人眼中就是個「慢半拍」的人，小時候更為嚴重，並為此困擾著，直至看到書中這段描述：</p><blockquote><p>右撇子打算說話時，可以直接進出左腦整理得有條不紊的資訊倉庫，因此能夠輕易找到目標資訊、輸出成為詞語。但是大多數的左撇子必須先經過「亂排資訊的倉庫」，才能走向「整理得有條不紊的資訊倉庫」，所以思緒總是在繞遠路。</p></blockquote><p>原來是因為大腦繞了遠路，左撇子的想法會先經過不擅長邏輯思考、語言的右腦，才去到左腦，比起直接用左腦反應的右撇子當然會比較慢，但也因為這樣，左撇子的左右腦發展可能會比右撇子更為平均。</p><p>慢半拍並不是因為愚笨，只是大腦處理資訊的方式不同。</p><h2 id="有些人格特質或許與身為左撇子有關"><a href="#有些人格特質或許與身為左撇子有關" class="headerlink" title="有些人格特質或許與身為左撇子有關"></a>有些人格特質或許與身為左撇子有關</h2><p>書中提到左撇子會對環境的變化較為敏感，因右腦會接收、解讀他人的情感，左腦則是發展出自己的情感，而以腦科學來看，所謂的「高敏感族群」，是當他人情感凌駕於自身情感時，便會放大周遭對自己的刺激，因此較容易刺激到右腦的左撇子，比起右撇子更可能成為高敏感族群。</p><p>又或是左撇子經常看見別人沒發覺的事物，因為和右撇子習慣往右邊看不同，左撇子會傾向看向左邊，自然和做為絕對多數的右撇子所看見的事物較為不同。</p><p>另外書中有提到蠻有趣的一點是，左撇子較擅於發想、創意，但在執行面較弱，所以當一群左撇子聚在一起時，執行力會很差，需要加入右撇子來增加執行力。</p><h2 id="無論左、右撇子，都需要為大腦帶來刺激"><a href="#無論左、右撇子，都需要為大腦帶來刺激" class="headerlink" title="無論左、右撇子，都需要為大腦帶來刺激"></a>無論左、右撇子，都需要為大腦帶來刺激</h2><p>雖然書中大部分內容是以左撇子為主角來描述，卻也提到很多關於大腦發展的描述：</p><blockquote><p>雙手是我們日常活動時，會頻繁動用的部位。手也是我們全身上下能夠做出最複雜動作的部位，像是抓握、敲打、翻頁、捏起小東西等⋯⋯人就是像這樣運用雙手來行動，動用到許多腦區，使腦部更加發達。</p></blockquote><p>以下都與大腦發展有關：</p><ul><li>刻意改變平常的習慣，比如改變平常通勤的路線，都有助於刺激大腦。</li><li>握力也和記憶力有關。</li><li>頻繁使用雙手，能均衡發展大腦。</li></ul><p>先前說到體育課為了雙方好接球，我適應了右撇子的球路，但在大學時發生了一件事，細心的體育老師在一場桌球的發球考試中，特地成立一個左撇子專屬隊伍，覺得很新鮮、又是左撇子的我自然是開心地排入隊伍，卻發現我早就習慣發給右撇子的球路，要改回左撇子的球路反而沒那麼順手，還向老師要求站在右撇子發球的位置，當下只覺辜負了老師的美意。</p><p>現在回想這件事，不禁覺得自己這樣，是不是也是一種思考上的僵化？</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>讀完這本書後，為我長久以來的疑惑有了解答，每個人都是獨特的，不需要因為自己和大部分人不同而害怕，左撇子、右撇子都好，只要不再固守日復一日的生活，適時加入變化，便能維持大腦的靈活。</p><p>現在我早已沒有那麼在意自己是個左撇子，但如果可以，我還是希望早點遇見這本書，讓從前那顆脆弱而幼小的心靈得到一些寬慰，告訴自己，日常生活中沒那麼順手的事，都是為大腦帶來成長的珍貴機會。</p><p>整本書讀來相當輕鬆有趣，無論是想了解左右撇子的差異，或是對大腦運作有所好奇，又或是本身就是左撇子的人都可以考慮入手這本書，感謝看到這裡的每一個人。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 閱讀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript - 資料型別</title>
      <link href="/2023/06/29/js_data-type/"/>
      <url>/2023/06/29/js_data-type/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 的型別可分為兩大類，分別是原始型別與物件型別。</p><h2 id="原始型別"><a href="#原始型別" class="headerlink" title="原始型別"></a>原始型別</h2><p>原始型別(Primitive type)有以下七種：</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Null</li><li>Undefined</li><li>Symbol：ES6&#x2F;2015 之後出現</li><li>BigInt：ES11&#x2F;2020 之後出現，適用於非常大的數值。</li></ul><h3 id="字串-String"><a href="#字串-String" class="headerlink" title="字串 String"></a>字串 String</h3><p>須使用雙引號 <code>&quot;&quot;</code> 或單引號 <code>&#39;&#39;</code> 包裹起來，且不能混合使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;It&#x27;s a dog.&quot;); // &quot;It&#x27;is a dog.&quot;</span><br><span class="line"></span><br><span class="line">console.log(&#x27;It&#x27;s a dog.&#x27;);</span><br><span class="line">// 會報錯，英文句子中重複出現單引號，導致語法錯誤</span><br><span class="line"></span><br><span class="line">console.log(&quot;It is a dog.&#x27;);</span><br><span class="line">// 會報錯，混合使用單引號和雙引號，導致語法錯誤</span><br></pre></td></tr></table></figure><p>如果沒有使用單引號和雙引號，JS 會認為這是變數，前面沒有宣告過該變數，就會報錯。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;奶油義大利麵&quot;</span>); <span class="comment">// &quot;奶油義大利麵&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(奶油義大利麵);</span><br><span class="line"><span class="comment">// 會報錯，程式認為是在呼叫不存在的變數</span></span><br></pre></td></tr></table></figure><h3 id="數字-Number"><a href="#數字-Number" class="headerlink" title="數字 Number"></a>數字 Number</h3><p>JS 裡面並沒有區分整數、浮點數，所有數字都屬於 Number 型別。<br>其中<code>NaN</code>(not an number) 也是屬於 Number，當某值經過轉型後，該值無法轉換為數字就會出現 NaN。</p><h3 id="布林-Boolean"><a href="#布林-Boolean" class="headerlink" title="布林 Boolean"></a>布林 Boolean</h3><p>只有 <code>true</code> 和 <code>false</code> 兩種值，它不是字串，不需要用引號包裹，經常用於流程判斷。</p><h3 id="Undefind-與-Null"><a href="#Undefind-與-Null" class="headerlink" title="Undefind 與 Null"></a>Undefind 與 Null</h3><p>兩者都表示空值的意思，但使用時機不同：</p><ul><li><code>Undefined</code> 會出現在已宣告、尚未賦值的變數上，通常是由系統賦予，並不會手動賦值到變數上。</li><li><code>Null</code> 則是會手動賦予給變數，當變數儲存大量資料，需要清空釋放記憶體時，就會手動賦予 Null 到變數上。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mother;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> mother); <span class="comment">// &quot;Undefined&quot;</span></span><br></pre></td></tr></table></figure><h2 id="物件型別"><a href="#物件型別" class="headerlink" title="物件型別"></a>物件型別</h2><blockquote><p>原始型別以外的都是物件型別(Object Type)，包括 Function、Array、Object 都是屬於物件型別，所以並沒有 Function 型別，或是 Array 型別。</p></blockquote><h3 id="物件-Object"><a href="#物件-Object" class="headerlink" title="物件 Object"></a>物件 Object</h3><p>使用 {} 包裹的資料，包含一對 key 和 value，可以儲存「一個對象包含多個不同性質」的資料。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> family = &#123;</span><br><span class="line">　　<span class="attr">father</span>: <span class="string">&quot;Mark&quot;</span>, <span class="comment">// father 是 key，&quot;mark&quot; 是 value</span></span><br><span class="line">　　<span class="attr">mother</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">　　<span class="attr">dog</span>: <span class="string">&quot;Momo&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="陣列-Array"><a href="#陣列-Array" class="headerlink" title="陣列 Array"></a>陣列 Array</h3><p>使用 [] 包裹的資料，適合儲存「相同性質」的多筆資料。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> drinks = [<span class="string">&quot;可口可樂&quot;</span>, <span class="string">&quot;可爾必思&quot;</span>, <span class="string">&quot;珍珠奶茶&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="陣列和物件可以混合使用"><a href="#陣列和物件可以混合使用" class="headerlink" title="陣列和物件可以混合使用"></a>陣列和物件可以混合使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> store = &#123;</span><br><span class="line">　　<span class="attr">boss</span>: <span class="string">&quot;Tina&quot;</span>,</span><br><span class="line">　　<span class="attr">drinks</span>: [<span class="string">&quot;卡布奇諾&quot;</span>, <span class="string">&quot;黑咖啡&quot;</span>, <span class="string">&quot;珍珠奶茶&quot;</span>],</span><br><span class="line">　　<span class="attr">customer</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stores = [</span><br><span class="line">　　&#123;</span><br><span class="line">　　　　<span class="attr">storeName</span>: <span class="string">&quot;朵朵咖啡廳&quot;</span>,</span><br><span class="line">　　　　<span class="attr">boss</span>: <span class="string">&quot;Tina&quot;</span>,</span><br><span class="line">　　　　<span class="attr">drinks</span>: [<span class="string">&quot;卡布奇諾&quot;</span>, <span class="string">&quot;黑咖啡&quot;</span>, <span class="string">&quot;珍珠奶茶&quot;</span>],</span><br><span class="line">　　　　<span class="attr">customer</span>: <span class="number">20</span>　　</span><br><span class="line">　　&#125;,</span><br><span class="line">　　&#123;</span><br><span class="line">　　　　<span class="attr">storeName</span>: <span class="string">&quot;桑心酒吧&quot;</span>,</span><br><span class="line">　　　　<span class="attr">boss</span>: <span class="string">&quot;Gray&quot;</span>,</span><br><span class="line">　　　　<span class="attr">drinks</span>: [<span class="string">&quot;啤酒&quot;</span>, <span class="string">&quot;長島青茶&quot;</span>, <span class="string">&quot;威士忌&quot;</span>],</span><br><span class="line">　　　　<span class="attr">customer</span>: <span class="number">20</span></span><br><span class="line">　　&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="查詢型別"><a href="#查詢型別" class="headerlink" title="查詢型別"></a>查詢型別</h2><h3 id="方法一、使用-typeof-方法"><a href="#方法一、使用-typeof-方法" class="headerlink" title="方法一、使用 typeof 方法"></a>方法一、使用 typeof 方法</h3><p>印出的會是字串形式。這邊先使用在原始型別的查詢上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;Alice&quot;</span>); <span class="comment">//String</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123</span>); <span class="comment">//Number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>); <span class="comment">//Boolean</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>); <span class="comment">//Undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">//Object // why?</span></span><br></pre></td></tr></table></figure><p>再來是物件型別的查詢：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []); <span class="comment">//Object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;); <span class="comment">//Object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;); <span class="comment">//Function //why?</span></span><br></pre></td></tr></table></figure><p>這邊會發現三個問題：</p><ul><li>null 會被判斷成 Object，這是 JS 一個著名的錯誤，原本有被提出來修正，但因為會影響到許多網站的正常運作，所以就將錯就錯了XD</li><li>[] 和 {} 的結果都是 Object，要怎麼判斷它是陣列還是物件？</li><li>照理說不會出現 Function 型別，如果不屬於原始型別的，應該都會是物件型別</li></ul><p>所以可以發現， typeof 查詢型別的結果有時候沒那麼精準，需要搭配其他方式來查詢型別。</p><h3 id="方法二、Array-isArray"><a href="#方法二、Array-isArray" class="headerlink" title="方法二、Array.isArray()"></a>方法二、Array.isArray()</h3><p>以此方法來判斷型別是否為陣列，是陣列的話會回傳 true，不是就回傳 false。就可以解決使用 typeof 無法看出該值是陣列或物件的問題。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>([])); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(&#123;&#125;)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="方法三、Object-prototype-toString-call"><a href="#方法三、Object-prototype-toString-call" class="headerlink" title="方法三、Object.prototype.toString.call()"></a>方法三、Object.prototype.toString.call()</h3><p>這方法只需要看最後結果就能夠知道確切的型別，但還是要記得 Array, Function, Object 實際上都屬於物件型別。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&quot;Mina&quot;</span>));</span><br><span class="line"><span class="comment">// [object String]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">123</span>));</span><br><span class="line"><span class="comment">// [object Number]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>));</span><br><span class="line"><span class="comment">// [object Undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>));</span><br><span class="line"><span class="comment">// [object Null]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]));</span><br><span class="line"><span class="comment">// [object Array]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;&#125;));</span><br><span class="line"><span class="comment">// [object Object]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;));</span><br><span class="line"><span class="comment">// [object Function]</span></span><br></pre></td></tr></table></figure><p>有關 JavaScript 型別的分享就到這裡，若有錯誤歡迎指正，感謝看完這篇的大家。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
